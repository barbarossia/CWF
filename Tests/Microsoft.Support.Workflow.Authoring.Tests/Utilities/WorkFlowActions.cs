using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Reflection;
using CWF.DataContracts;
using TestInput_Lib2;
using Microsoft.Build.Execution;
using System.Collections.Generic;
using AuthoringToolTests.Services;
using System.Activities.Statements;
using System.Windows.Forms.VisualStyles;
using System.Activities.Presentation.Services;
using Microsoft.Support.Workflow.Authoring.Models;
using Microsoft.Support.Workflow.Authoring.Services;
using Microsoft.Support.Workflow.Authoring.ViewModels;
using System.Activities.Presentation;
using Microsoft.Support.Workflow.Authoring.AddIns;
using Microsoft.Support.Workflow.Authoring.AddIns.Models;
using Microsoft.Support.Workflow.Authoring.AddIns.Utilities;
using Microsoft.Support.Workflow.Authoring.AddIns.Data;

namespace Microsoft.Support.Workflow.Authoring.Tests
{
    public class WorkFlowActions
    {
        /// <summary>
        /// Get WorkflowItem
        /// </summary>
        public static WorkflowItem AutoGeneratedWorkFlowItem
        {
            get
            {
                DynamicWorkFlow dWorkFlow = new DynamicWorkFlow(DynamicWorkFlow.AutoDynamicWorkFlow);
                string xAml = dWorkFlow.GetNewWorkFlow.ToXaml();
                var workFlowTemplet = new WorkflowItem(TestUtilities.GenerateRandomString(50), TestUtilities.GenerateRandomString(10),
                                                       xAml, "Workflow");

                workFlowTemplet.ActivityType = TestUtilities.GenerateRandomString(15);
                workFlowTemplet.BusyCaption = TestUtilities.GenerateRandomString(15);
                workFlowTemplet.Category = TestUtilities.GetRandomCategory;
                workFlowTemplet.CreateDateTime = DateTime.Now;

                workFlowTemplet.CreatedBy = Utility.GetCurrentUserName();
                workFlowTemplet.Description = TestUtilities.GenerateRandomString(250);
                workFlowTemplet.DeveloperNote = TestUtilities.GenerateRandomString(150);

                workFlowTemplet.LocalFileFullName = TestUtilities.GenerateRandomString(15);
                workFlowTemplet.Status = TestUtilities.GetRandomStatus;

                workFlowTemplet.UpdateDateTime = DateTime.Now;
                workFlowTemplet.UpdatedBy = Utility.GetCurrentUserName();

                workFlowTemplet.Tags = "MetaData";
                workFlowTemplet.Description = TestUtilities.GenerateRandomString(15);
                workFlowTemplet.Env = Env.Dev;
                return workFlowTemplet;
            }
        }

        /// <summary>
        /// Get Default Activity Assembly
        /// </summary>
        public static ActivityAssemblyItem GetActivityAssemblyItem
        {
            get
            {
                int random = new Random().Next(0, 9999990);
                var activityLibrary = new ActivityAssemblyItem
                {
                    Name = string.Format("ActivityLibrary{0}", random),
                    Version = new Version(0, 0, 0, 1),
                    Status = "Private"
                };
                return activityLibrary;
            }
        }

        /// <summary>
        /// Get WorkflowItem
        /// </summary>
        public static WorkflowItem AutoGeneratedWorkFlowItemWithNoActivity
        {
            get
            {
                string xAml = TestUtilities.EmptyWorkFlowTemplateXamlCode;
                var workFlowTemplet = new WorkflowItem(TestUtilities.GenerateRandomString(50), TestUtilities.GenerateRandomString(10),
                                                       xAml, "Workflow");
                workFlowTemplet.Status = TestUtilities.GetRandomStatus;
                workFlowTemplet.Tags = TestUtilities.GenerateRandomString(9);
                workFlowTemplet.Description = TestUtilities.GenerateRandomString(150);

                return workFlowTemplet;
            }
        }

        /// <summary>
        /// Get WorkflowItem
        /// </summary>
        public static WorkflowItem GeneratedWorkFlowItem(WorkFlowDataTypes wfType)
        {
            DynamicWorkFlow dWorkFlow = new DynamicWorkFlow(wfType);

            var workFlowTemplet = new WorkflowItem(TestUtilities.GenerateRandomString(15), TestUtilities.GenerateRandomString(10),
                                                      dWorkFlow.GetNewWorkFlow.ToXaml(), TestUtilities.GenerateRandomString(10));

            workFlowTemplet.ActivityType = TestUtilities.GenerateRandomString(15);
            workFlowTemplet.BusyCaption = TestUtilities.GenerateRandomString(15);
            workFlowTemplet.Category = TestUtilities.GetRandomCategory;
            workFlowTemplet.CreateDateTime = DateTime.Now;

            workFlowTemplet.CreatedBy = Utility.GetCurrentUserName();
            workFlowTemplet.Description = TestUtilities.GenerateRandomString(250);
            workFlowTemplet.DeveloperNote = TestUtilities.GenerateRandomString(15);

            workFlowTemplet.LocalFileFullName = TestUtilities.GenerateRandomString(15);
            workFlowTemplet.Status = TestUtilities.GetRandomStatus;

            workFlowTemplet.UpdateDateTime = DateTime.Now;
            workFlowTemplet.UpdatedBy = Utility.GetCurrentUserName();

            workFlowTemplet.Tags = "MetaData";
            workFlowTemplet.Description = TestUtilities.GenerateRandomString(15);

            return workFlowTemplet;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <param name="displayName"></param>
        public static WorkflowItem CreateWorkFlowItem(string name, string displayName)
        {
            WorkflowItem workFlowTemplet = AutoGeneratedWorkFlowItem;
            workFlowTemplet.Name = name;
            workFlowTemplet.DisplayName = displayName;
            return workFlowTemplet;
        }

        /// <summary>
        /// Get Default Activity Assembly
        /// </summary>
        public static IEnumerable<ActivityAssemblyItem> GetActivityAssemblyItems(int count)
        {
            var aai = new List<ActivityAssemblyItem>();
            for (int i = 0; i < count; i++)
            {
                aai.Add(GetActivityAssemblyItem);
            }
            return aai;
        }

        /// <summary>
        /// Verify WorkFlow version after compile
        /// </summary>
        /// <param name="numberOfCompile"></param>
        /// <param name="wfi"></param>
        /// <returns></returns>
        public static WorkflowItem CompileSaveAndVerifyWorkFlowVersion(int numberOfCompile, WorkflowItem wfi)
        {
            var mwAccessor = new MainWindowViewModel_Accessor();

            var bVersion = new Version(wfi.Version);

            int compileCount = 0;

            for (int i = 0; i < numberOfCompile; i++)
            {
                var project = new CompileProject(wfi.Name, wfi.Version, wfi.XamlCode);

                var result = Compiler.Compile(project);

                if (result.BuildResultCode == BuildResultCode.Success)
                {
                    compileCount++;
                    //mwAccessor.CompileCommandExecutePostCompile(wfi, result);
                }
            }

            var expectedVersion = bVersion;
            switch (wfi.Status)
            {
                case "Private":
                    expectedVersion = new Version(bVersion.Major, bVersion.Minor,
                                            bVersion.Build, (bVersion.Revision + compileCount));
                    break;
                case "Public":
                    expectedVersion = new Version(bVersion.Major,
                               (bVersion.Minor + compileCount), bVersion.Build, bVersion.Revision);
                    break;
            }


            //Create project or workflow as public activities
            var properties = new WorkFlowProperties
            {
                Name = wfi.Name,
                Status = wfi.Status,
                Version = expectedVersion.ToString()
            };

            //Final work flow
            return CreateSaveAndValidateWorkFlow(properties, wfi);
        }

        /// <summary>
        /// 
        /// </summary>
        public static StoreActivityLibraryDependenciesGroupsRequestDC StoreActivityLibraryDependenciesGroupsRequestDC
        {
            get
            {
                var workFLow = AutoGeneratedWorkFlowItem;
                IEnumerable<ActivityAssemblyItem> assemblyItemsUsed = GetActivityAssemblyItems(5);
                var storeActivity = new StoreActivityLibraryDependenciesGroupsRequestDC
                {
                    Name = workFLow.Name,
                    Version = workFLow.Version,
                    List = new List
                        <StoreActivityLibraryDependenciesGroupsRequestDC>
                        (assemblyItemsUsed.Select(asm =>
                            new StoreActivityLibraryDependenciesGroupsRequestDC
                            {
                                Name = asm.Name,
                                Version = asm.Version.ToString(),
                            }.SetIncaller())
                        )
                };
                return storeActivity;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="properties"></param>
        /// <param name="workFlow"> </param>
        public static WorkflowItem CreateSaveAndValidateWorkFlow(WorkFlowProperties properties, WorkflowItem workFlow = null, bool cleanUpDatabase = true, bool dataVarify = true)
        {
            var newWorkFlow = workFlow;
            MainWindowViewModel viewModel;
            if (workFlow == null) { newWorkFlow = AutoGeneratedWorkFlowItem; }

            //Modify WorkFlow property
            if (!string.IsNullOrEmpty(properties.Name)) { newWorkFlow.Name = properties.Name; }
            if (!string.IsNullOrEmpty(properties.Status)) { newWorkFlow.Status = properties.Status; }
            if (!string.IsNullOrEmpty(properties.Version)) { newWorkFlow.Version = properties.Version; }

            if (!string.IsNullOrEmpty(properties.Tags)) { newWorkFlow.Tags = properties.Tags; }
            if (properties.CreateDateTime != null)
            {
                newWorkFlow.CreateDateTime = properties.CreateDateTime;
            }
            if (!string.IsNullOrEmpty(properties.CreatedBy)) { newWorkFlow.CreatedBy = properties.CreatedBy; }
            if (!string.IsNullOrEmpty(properties.UpdatedBy)) { newWorkFlow.UpdatedBy = properties.UpdatedBy; }
            if (properties.UpdateDateTime != null) { newWorkFlow.UpdateDateTime = properties.UpdateDateTime; }
            if (!string.IsNullOrEmpty(properties.BusyCaption)) { newWorkFlow.BusyCaption = properties.BusyCaption; }
            if (!string.IsNullOrEmpty(properties.Description)) { newWorkFlow.Description = properties.Description; }
            if (!string.IsNullOrEmpty(properties.ActivityType)) { newWorkFlow.ActivityType = properties.ActivityType; }
            if (!string.IsNullOrEmpty(properties.DeveloperNote)) { newWorkFlow.DeveloperNote = properties.DeveloperNote; }
            if (!string.IsNullOrEmpty(properties.LocalFileFullName)) { newWorkFlow.LocalFileFullName = properties.LocalFileFullName; }
            if (properties.Environment != 0) { newWorkFlow.Env = properties.Environment; }
            else { newWorkFlow.Env = Env.Dev; }

            using (new CachingIsolator(TestInputs.TestInputs.ActivityAssemblyItems.TestInput_Lib3,
                                       TestInputs.TestInputs.ActivityAssemblyItems.TestInput_Lib2,
                                       TestInputs.TestInputs.ActivityAssemblyItems.TestInput_Lib1))
            {

                //Save Work Flow
                string bindier = Locations.ToServer.ToString();
                if (!string.IsNullOrEmpty(newWorkFlow.Status) &&
                              newWorkFlow.Status.ToLower() == "public")
                {
                    bindier = Locations.ToMarketplace.ToString();
                }
                if (newWorkFlow.OldVersion == null)
                    newWorkFlow.OldVersion = newWorkFlow.Version;
                //SaveToServer
                TestUtilities.SaveWorkflow(newWorkFlow, bindier, out viewModel);
                if (viewModel.WorkflowItems.Count > 0)
                    viewModel.WorkflowItems.FirstOrDefault().Close();
            }

            //Add Majour property to verify on server-side
            if (properties == null) { properties = new WorkFlowProperties(); }

            //Add workflow properties from the new workflow
            if (string.IsNullOrEmpty(properties.Name)) { properties.Name = newWorkFlow.Name; }
            if (string.IsNullOrEmpty(properties.Tags)) { properties.Tags = newWorkFlow.Tags; }
            if (string.IsNullOrEmpty(properties.Status)) { properties.Status = newWorkFlow.Status; }
            if (string.IsNullOrEmpty(properties.Version)) { properties.Version = newWorkFlow.Version; }
            if (properties.CreateDateTime == null) { properties.CreateDateTime = newWorkFlow.CreateDateTime; }
            if (string.IsNullOrEmpty(properties.CreatedBy)) { properties.CreatedBy = newWorkFlow.CreatedBy; }
            if (string.IsNullOrEmpty(properties.UpdatedBy)) { properties.UpdatedBy = newWorkFlow.UpdatedBy; }
            if (properties.UpdateDateTime == null) { properties.UpdateDateTime = newWorkFlow.UpdateDateTime; }
            if (string.IsNullOrEmpty(properties.BusyCaption)) { properties.BusyCaption = newWorkFlow.BusyCaption; }
            if (string.IsNullOrEmpty(properties.Description)) { properties.Description = newWorkFlow.Description; }
            if (string.IsNullOrEmpty(properties.ActivityType)) { properties.ActivityType = newWorkFlow.ActivityType; }
            if (string.IsNullOrEmpty(properties.DeveloperNote)) { properties.DeveloperNote = newWorkFlow.DeveloperNote; }
            if (string.IsNullOrEmpty(properties.LocalFileFullName)) { properties.LocalFileFullName = newWorkFlow.LocalFileFullName; }
           

            if (dataVarify)
            {
                var currentWorkFlow = new DataVerifier(properties.Name);
                currentWorkFlow.VerifyWorkflowPropertiesInActivityLibrariesTable(properties, newWorkFlow, viewModel);
                currentWorkFlow.VerifyWorkflowPropertiesInStoreActivitesTable(properties, newWorkFlow, viewModel);
            }

            //DataCleanUp StoreActivity
            try
            {
                if (cleanUpDatabase)
                {
                    DataCleanUp.ExecuteSqlQuery(DataCleanUp.StoreActivity, newWorkFlow.Name);
                    DataCleanUp.ExecuteSqlQuery(DataCleanUp.ActivityLibraries, newWorkFlow.Name);
                }
            }
            catch (Exception) {  /* Do nothing even if Clean-up failed*/ }

            return newWorkFlow;
        }

        public static WorkflowItem CreateEmptyWorkFlow(out MainWindowViewModel viewModel)
        {
            WorkflowItem createdWorkflowItem = null;
            createdWorkflowItem = new WorkflowItem(TestUtilities.GenerateRandomString(20), TestUtilities.GenerateRandomString(10),
                                      TestUtilities.EmptyWorkFlowTemplateXamlCode, "Workflow");
            if (createdWorkflowItem.OldVersion == null)
                createdWorkflowItem.OldVersion = createdWorkflowItem.Version;
            TestUtilities.SaveWorkflow(createdWorkflowItem, Locations.ToMarketplace.ToString(), out viewModel);
            return createdWorkflowItem;
        }
    }
}
