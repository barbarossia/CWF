// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Microsoft.Support.Workflow.Authoring.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public partial class UIMap
    {
       
        
        #region Properties
        public virtual CreateWorkflowParams CreateWorkflowParams
        {
            get
            {
                if ((this.mCreateWorkflowParams == null))
                {
                    this.mCreateWorkflowParams = new CreateWorkflowParams();
                }
                return this.mCreateWorkflowParams;
            }
        }
        
        public UICommonWorkflowFoundrWindow UICommonWorkflowFoundrWindow
        {
            get
            {
                if ((this.mUICommonWorkflowFoundrWindow == null))
                {
                    this.mUICommonWorkflowFoundrWindow = new UICommonWorkflowFoundrWindow();
                }
                return this.mUICommonWorkflowFoundrWindow;
            }
        }
        
        public UIOpenProjectfromServeWindow UIOpenProjectfromServeWindow
        {
            get
            {
                if ((this.mUIOpenProjectfromServeWindow == null))
                {
                    this.mUIOpenProjectfromServeWindow = new UIOpenProjectfromServeWindow();
                }
                return this.mUIOpenProjectfromServeWindow;
            }
        }
        
        public UICommonWorkflowFoundrWindow1 UICommonWorkflowFoundrWindow1
        {
            get
            {
                if ((this.mUICommonWorkflowFoundrWindow1 == null))
                {
                    this.mUICommonWorkflowFoundrWindow1 = new UICommonWorkflowFoundrWindow1();
                }
                return this.mUICommonWorkflowFoundrWindow1;
            }
        }
        
        public UIMarketplaceHomeWindow UIMarketplaceHomeWindow
        {
            get
            {
                if ((this.mUIMarketplaceHomeWindow == null))
                {
                    this.mUIMarketplaceHomeWindow = new UIMarketplaceHomeWindow();
                }
                return this.mUIMarketplaceHomeWindow;
            }
        }
        
        public UINewProjectWindow UINewProjectWindow
        {
            get
            {
                if ((this.mUINewProjectWindow == null))
                {
                    this.mUINewProjectWindow = new UINewProjectWindow();
                }
                return this.mUINewProjectWindow;
            }
        }
        #endregion
        
        #region Fields
        private CreateWorkflowParams mCreateWorkflowParams;
        
        private UICommonWorkflowFoundrWindow mUICommonWorkflowFoundrWindow;
        
        private UIOpenProjectfromServeWindow mUIOpenProjectfromServeWindow;
        
        private UICommonWorkflowFoundrWindow1 mUICommonWorkflowFoundrWindow1;
        
        private UIMarketplaceHomeWindow mUIMarketplaceHomeWindow;
        
        private UINewProjectWindow mUINewProjectWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateWorkflow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class CreateWorkflowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'test0228_001' in 'Enter the name of the workflow you wish to create' text box
        /// </summary>
        public string UIEnterthenameoftheworEditText = "test0228_001";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UICommonWorkflowFoundrWindow : WpfWindow
    {
        
        public UICommonWorkflowFoundrWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Common Workflow Foundry - v-allhe (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIMenuMenu UIMenuMenu
        {
            get
            {
                if ((this.mUIMenuMenu == null))
                {
                    this.mUIMenuMenu = new UIMenuMenu(this);
                }
                return this.mUIMenuMenu;
            }
        }
        
        public UIRadDockingCustom UIRadDockingCustom
        {
            get
            {
                if ((this.mUIRadDockingCustom == null))
                {
                    this.mUIRadDockingCustom = new UIRadDockingCustom(this);
                }
                return this.mUIRadDockingCustom;
            }
        }
        
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIActivityBuilderCustom UIActivityBuilderCustom
        {
            get
            {
                if ((this.mUIActivityBuilderCustom == null))
                {
                    this.mUIActivityBuilderCustom = new UIActivityBuilderCustom(this);
                }
                return this.mUIActivityBuilderCustom;
            }
        }
        
        public UISequenceCustom UISequenceCustom
        {
            get
            {
                if ((this.mUISequenceCustom == null))
                {
                    this.mUISequenceCustom = new UISequenceCustom(this);
                }
                return this.mUISequenceCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuMenu mUIMenuMenu;
        
        private UIRadDockingCustom mUIRadDockingCustom;
        
        private UIItemCustom mUIItemCustom;
        
        private UIActivityBuilderCustom mUIActivityBuilderCustom;
        
        private UISequenceCustom mUISequenceCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuMenu : WpfMenu
    {
        
        public UIMenuMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "menu";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIMarketplaceMenuItem UIMarketplaceMenuItem
        {
            get
            {
                if ((this.mUIMarketplaceMenuItem == null))
                {
                    this.mUIMarketplaceMenuItem = new UIMarketplaceMenuItem(this);
                }
                return this.mUIMarketplaceMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIMarketplaceMenuItem mUIMarketplaceMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem : WpfMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIOpenProjectMenuItem
        {
            get
            {
                if ((this.mUIOpenProjectMenuItem == null))
                {
                    this.mUIOpenProjectMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenProjectMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Open Project...";
                    this.mUIOpenProjectMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenProjectMenuItem.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUIOpenProjectMenuItem;
            }
        }
        
        public WpfMenuItem UINewProjectMenuItem
        {
            get
            {
                if ((this.mUINewProjectMenuItem == null))
                {
                    this.mUINewProjectMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUINewProjectMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "New Project...";
                    this.mUINewProjectMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewProjectMenuItem.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUINewProjectMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIOpenProjectMenuItem;
        
        private WpfMenuItem mUINewProjectMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMarketplaceMenuItem : WpfMenuItem
    {
        
        public UIMarketplaceMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Marketplace";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIBrowsetheMarketplaceMenuItem
        {
            get
            {
                if ((this.mUIBrowsetheMarketplaceMenuItem == null))
                {
                    this.mUIBrowsetheMarketplaceMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIBrowsetheMarketplaceMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Browse the Marketplace";
                    this.mUIBrowsetheMarketplaceMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBrowsetheMarketplaceMenuItem.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUIBrowsetheMarketplaceMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIBrowsetheMarketplaceMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIRadDockingCustom : WpfCustom
    {
        
        public UIRadDockingCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.RadDocking";
            this.SearchProperties["AutomationId"] = "radDocking";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UITabWorkflowTabList UITabWorkflowTabList
        {
            get
            {
                if ((this.mUITabWorkflowTabList == null))
                {
                    this.mUITabWorkflowTabList = new UITabWorkflowTabList(this);
                }
                return this.mUITabWorkflowTabList;
            }
        }
        #endregion
        
        #region Fields
        private UITabWorkflowTabList mUITabWorkflowTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITabWorkflowTabList : WpfTabList
    {
        
        public UITabWorkflowTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabWorkflow";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISmallTabPage UISmallTabPage
        {
            get
            {
                if ((this.mUISmallTabPage == null))
                {
                    this.mUISmallTabPage = new UISmallTabPage(this);
                }
                return this.mUISmallTabPage;
            }
        }
        
        public UIMiddleTabPage UIMiddleTabPage
        {
            get
            {
                if ((this.mUIMiddleTabPage == null))
                {
                    this.mUIMiddleTabPage = new UIMiddleTabPage(this);
                }
                return this.mUIMiddleTabPage;
            }
        }
        
        public UILargeTabPage UILargeTabPage
        {
            get
            {
                if ((this.mUILargeTabPage == null))
                {
                    this.mUILargeTabPage = new UILargeTabPage(this);
                }
                return this.mUILargeTabPage;
            }
        }
        
        public UITest0228001TabPage UITest0228001TabPage
        {
            get
            {
                if ((this.mUITest0228001TabPage == null))
                {
                    this.mUITest0228001TabPage = new UITest0228001TabPage(this);
                }
                return this.mUITest0228001TabPage;
            }
        }
        #endregion
        
        #region Fields
        private UISmallTabPage mUISmallTabPage;
        
        private UIMiddleTabPage mUIMiddleTabPage;
        
        private UILargeTabPage mUILargeTabPage;
        
        private UITest0228001TabPage mUITest0228001TabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISmallTabPage : WpfTabPage
    {
        
        public UISmallTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "small";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseTabButtonButton
        {
            get
            {
                if ((this.mUICloseTabButtonButton == null))
                {
                    this.mUICloseTabButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseTabButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CloseTabButton";
                    this.mUICloseTabButtonButton.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUICloseTabButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseTabButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMiddleTabPage : WpfTabPage
    {
        
        public UIMiddleTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Middle";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseTabButtonButton
        {
            get
            {
                if ((this.mUICloseTabButtonButton == null))
                {
                    this.mUICloseTabButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseTabButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CloseTabButton";
                    this.mUICloseTabButtonButton.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUICloseTabButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseTabButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UILargeTabPage : WpfTabPage
    {
        
        public UILargeTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "large";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseTabButtonButton
        {
            get
            {
                if ((this.mUICloseTabButtonButton == null))
                {
                    this.mUICloseTabButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseTabButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CloseTabButton";
                    this.mUICloseTabButtonButton.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUICloseTabButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseTabButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITest0228001TabPage : WpfTabPage
    {
        
        public UITest0228001TabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "test0228001";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseTabButtonButton
        {
            get
            {
                if ((this.mUICloseTabButtonButton == null))
                {
                    this.mUICloseTabButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseTabButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CloseTabButton";
                    this.mUICloseTabButtonButton.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUICloseTabButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseTabButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIPART_ToolsTree UIPART_ToolsTree
        {
            get
            {
                if ((this.mUIPART_ToolsTree == null))
                {
                    this.mUIPART_ToolsTree = new UIPART_ToolsTree(this);
                }
                return this.mUIPART_ToolsTree;
            }
        }
        #endregion
        
        #region Fields
        private UIPART_ToolsTree mUIPART_ToolsTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIPART_ToolsTree : WpfTree
    {
        
        public UIPART_ToolsTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "PART_Tools";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIBasicLogicTreeItem UIBasicLogicTreeItem
        {
            get
            {
                if ((this.mUIBasicLogicTreeItem == null))
                {
                    this.mUIBasicLogicTreeItem = new UIBasicLogicTreeItem(this);
                }
                return this.mUIBasicLogicTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBasicLogicTreeItem mUIBasicLogicTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIBasicLogicTreeItem : WpfTreeItem
    {
        
        public UIBasicLogicTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Basic Logic";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UISystemActivitiesStatTreeItem
        {
            get
            {
                if ((this.mUISystemActivitiesStatTreeItem == null))
                {
                    this.mUISystemActivitiesStatTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUISystemActivitiesStatTreeItem.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "System.Activities.Statements.Sequence";
                    this.mUISystemActivitiesStatTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemActivitiesStatTreeItem.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUISystemActivitiesStatTreeItem;
            }
        }
        
        public WpfTreeItem UISystemActivitiesStatTreeItem1
        {
            get
            {
                if ((this.mUISystemActivitiesStatTreeItem1 == null))
                {
                    this.mUISystemActivitiesStatTreeItem1 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUISystemActivitiesStatTreeItem1.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "System.Activities.Statements.WriteLine";
                    this.mUISystemActivitiesStatTreeItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemActivitiesStatTreeItem1.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUISystemActivitiesStatTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUISystemActivitiesStatTreeItem;
        
        private WpfTreeItem mUISystemActivitiesStatTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIActivityBuilderCustom : WpfCustom
    {
        
        public UIActivityBuilderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties["AutomationId"] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIDropactivityhereCustom UIDropactivityhereCustom
        {
            get
            {
                if ((this.mUIDropactivityhereCustom == null))
                {
                    this.mUIDropactivityhereCustom = new UIDropactivityhereCustom(this);
                }
                return this.mUIDropactivityhereCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDropactivityhereCustom mUIDropactivityhereCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDropactivityhereCustom : WpfCustom
    {
        
        public UIDropactivityhereCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties["AutomationId"] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIDropactivityhereText
        {
            get
            {
                if ((this.mUIDropactivityhereText == null))
                {
                    this.mUIDropactivityhereText = new WpfText(this);
                    #region Search Criteria
                    this.mUIDropactivityhereText.SearchProperties[WpfText.PropertyNames.Name] = "Drop activity here";
                    this.mUIDropactivityhereText.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUIDropactivityhereText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDropactivityhereText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISequenceCustom : WpfCustom
    {
        
        public UISequenceCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
            this.SearchProperties["AutomationId"] = "Sequence(SequenceDesigner)";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIDropactivityhereCustom1 UIDropactivityhereCustom
        {
            get
            {
                if ((this.mUIDropactivityhereCustom == null))
                {
                    this.mUIDropactivityhereCustom = new UIDropactivityhereCustom1(this);
                }
                return this.mUIDropactivityhereCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDropactivityhereCustom1 mUIDropactivityhereCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDropactivityhereCustom1 : WpfCustom
    {
        
        public UIDropactivityhereCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.WorkflowItemsPresenter";
            this.SearchProperties["AutomationId"] = "WorkflowItemsPresenter";
            this.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UISacdVerticalConnectoCustom
        {
            get
            {
                if ((this.mUISacdVerticalConnectoCustom == null))
                {
                    this.mUISacdVerticalConnectoCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUISacdVerticalConnectoCustom.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.VerticalConnector";
                    this.mUISacdVerticalConnectoCustom.SearchProperties["AutomationId"] = "sacd:VerticalConnector_1";
                    this.mUISacdVerticalConnectoCustom.WindowTitles.Add("Common Workflow Foundry - v-allhe (Administrator)");
                    #endregion
                }
                return this.mUISacdVerticalConnectoCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUISacdVerticalConnectoCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenProjectfromServeWindow : WpfWindow
    {
        
        public UIOpenProjectfromServeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Open Project from Server";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Open Project from Server");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Open Project from Server");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WpfButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SearchButton";
                    this.mUISearchButton.WindowTitles.Add("Open Project from Server");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        
        public WpfButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OpenButton";
                    this.mUIOpenButton.WindowTitles.Add("Open Project from Server");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        
        private WpfButton mUISearchButton;
        
        private WpfButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UICommonWorkflowFoundrWindow1 : WpfWindow
    {
        
        public UICommonWorkflowFoundrWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Common Workflow Foundry";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Common Workflow Foundry");
            #endregion
        }
        
        #region Properties
        public WpfButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WpfButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Common Workflow Foundry");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        
        public WpfButton UIOpenForEditingButton
        {
            get
            {
                if ((this.mUIOpenForEditingButton == null))
                {
                    this.mUIOpenForEditingButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOpenForEditingButton.SearchProperties[WpfButton.PropertyNames.Name] = "Open For Editing";
                    this.mUIOpenForEditingButton.WindowTitles.Add("Common Workflow Foundry");
                    #endregion
                }
                return this.mUIOpenForEditingButton;
            }
        }
        
        public WpfButton UIDontSaveButton
        {
            get
            {
                if ((this.mUIDontSaveButton == null))
                {
                    this.mUIDontSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDontSaveButton.SearchProperties[WpfButton.PropertyNames.Name] = "Don\'t Save";
                    this.mUIDontSaveButton.WindowTitles.Add("Common Workflow Foundry");
                    #endregion
                }
                return this.mUIDontSaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIYesButton;
        
        private WpfButton mUIOpenForEditingButton;
        
        private WpfButton mUIDontSaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMarketplaceHomeWindow : WpfWindow
    {
        
        public UIMarketplaceHomeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Marketplace Home";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Marketplace Home");
            #endregion
        }
        
        #region Properties
        public WpfProgressBar UILoadingmarketplaceasProgressBar
        {
            get
            {
                if ((this.mUILoadingmarketplaceasProgressBar == null))
                {
                    this.mUILoadingmarketplaceasProgressBar = new WpfProgressBar(this);
                    #region Search Criteria
                    this.mUILoadingmarketplaceasProgressBar.SearchProperties[WpfProgressBar.PropertyNames.Name] = "Loading marketplace assets...";
                    this.mUILoadingmarketplaceasProgressBar.WindowTitles.Add("Marketplace Home");
                    #endregion
                }
                return this.mUILoadingmarketplaceasProgressBar;
            }
        }
        
        public WpfEdit UITxtSearchEdit
        {
            get
            {
                if ((this.mUITxtSearchEdit == null))
                {
                    this.mUITxtSearchEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtSearchEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtSearch";
                    this.mUITxtSearchEdit.WindowTitles.Add("Marketplace Home");
                    #endregion
                }
                return this.mUITxtSearchEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfProgressBar mUILoadingmarketplaceasProgressBar;
        
        private WpfEdit mUITxtSearchEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UINewProjectWindow : WpfWindow
    {
        
        public UINewProjectWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "New Project";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("New Project");
            #endregion
        }
        
        #region Properties
        public WpfProgressBar UIBusyIndicatorProgressBar
        {
            get
            {
                if ((this.mUIBusyIndicatorProgressBar == null))
                {
                    this.mUIBusyIndicatorProgressBar = new WpfProgressBar(this);
                    #region Search Criteria
                    this.mUIBusyIndicatorProgressBar.SearchProperties[WpfProgressBar.PropertyNames.AutomationId] = "busyIndicator";
                    this.mUIBusyIndicatorProgressBar.WindowTitles.Add("New Project");
                    #endregion
                }
                return this.mUIBusyIndicatorProgressBar;
            }
        }
        
        public WpfEdit UIEnterthenameoftheworEdit
        {
            get
            {
                if ((this.mUIEnterthenameoftheworEdit == null))
                {
                    this.mUIEnterthenameoftheworEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIEnterthenameoftheworEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Enter the name of the workflow you wish to create";
                    this.mUIEnterthenameoftheworEdit.WindowTitles.Add("New Project");
                    #endregion
                }
                return this.mUIEnterthenameoftheworEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfProgressBar mUIBusyIndicatorProgressBar;
        
        private WpfEdit mUIEnterthenameoftheworEdit;
        #endregion
    }
}
