using System;
using System.Xaml;
using System.Text;
using System.Linq;
using System.Activities;
using CWF.DataContracts;
using System.Reflection;
using System.Collections.Generic;
using AuthoringToolTests.Services;
using System.Activities.Statements;
using Microsoft.DynamicImplementations;
using Microsoft.Support.Workflow.Authoring.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Support.Workflow.Authoring.Services;
using Microsoft.Support.Workflow.Authoring.Tests.TestInputs;
using System.Security.Principal;
using Microsoft.Support.Workflow.Authoring.Security;
using System.Threading;
using System.ServiceModel;

namespace Microsoft.Support.Workflow.Authoring.Tests.SaveToServer
{
    [TestClass]
    public class SaveToServerShould
    {
        private const string OWNER = "v-yiabdi";
        private const string TestCategory = "FullTest";
        private WorkflowItem newWorkflow = null;
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // Use TestInitialize to run code before running each test 
        [TestInitialize()]
        public void MyTestInitialize()
        {
            //Create New WorkFlow
            newWorkflow = WorkFlowActions.AutoGeneratedWorkFlowItem;
        }
        [TestCleanup]
        public void MyTestCleanup()
        {
            if (newWorkflow != null)
                newWorkflow.Close();
        }
        #endregion


        [Description("Save New WorkFlow With Valid Property")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157601)]
        [TestCategory("Func-NoDif2-Smoke")]
        public void SaveNewWorkFlowWithValidProperty()
        {
            TestUtilities.RegistUtilityGetCurrentWindow();
            ////TestUtilities.RegistWinPrincipalFunc(AuthorizationService.AdminAuthorizationGroupName);
            TestUtilities.RegistCreateIntellisenseList();
            //Create project or workflow as public activities
            var properties = new WorkFlowProperties
            {
                Name = TestUtilities.GetRandomStringOfLength(15),
                Status = "Private",
                Version = "0.1.0.1"
            };
            WorkFlowActions.CreateSaveAndValidateWorkFlow(properties, newWorkflow);
        }


        [Description("Not Save NewWorkFlow With Empty Name")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157603)]
        [TestCategory("Func-NoDif1-Full")]
        public void NotSaveNewWorkFlowWithEmptyName()
        {
            TestUtilities.RegistUtilityGetCurrentWindow();
            //Set workflow Name to Empty
            newWorkflow.Name = string.Empty;
            ExpectException.That(() =>
            {
                WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
            }).Throws<CommunicationException>();
        }


        [Description("Not Save New WorkFlow With Empty Version")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157604)]
        [TestCategory("Func-Dif-Full")]
        [Ignore] /* UI has checked the invalid version. */
        public void NotSaveNewWorkFlowWithEmptyVersion()
        {
            try
            {
                //TestUtilities.MockWinPrincipal(AuthorizationService.AdminAuthorizationGroupName, () =>
                //{
                //    //Set WorkFlow Version to Empty
                //    newWorkflow.Version = string.Empty;
                //    //Workflow should not be entered in table
                //    WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
                //});
            }
            catch (Exception ex)
            {
                bool isExpected = false;
                if (ex.Message.Contains("is not a valid Marketplace version number"))
                {
                    isExpected = true;
                }
                Assert.IsTrue(isExpected);
            }
        }

        //HasBug
        [Description("Not Save New WorkFlow With Empty Or White Space Status")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157605)]
        [TestCategory("Func-Dif1-Full")]
        public void SaveNewWorkFlowAsPrivateWithEmptyOrWhiteSpaceStatus()
        {
            TestUtilities.RegistCreateIntellisenseList();
            //set status Empty
            bool isEmptystatus = false;
            try
            {
                //Set WorkFlow Status to Empty
                newWorkflow.Status = string.Empty;
                WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("Should be saved with default status, Private"))
                { isEmptystatus = true; }
            }


            //set status WHiteSpace
            bool isWhiteSpacestatus = false;
            try
            {
                //Create new WorkFlow Status to White Space
                newWorkflow.Status = "           ";
                WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
            }
            catch (Exception ex)
            {

                if (ex.Message.Contains("Should be saved with default status, Private"))
                { isWhiteSpacestatus = true; }
            }

            Assert.IsTrue(!isEmptystatus, "Workflow with Empty status should not be saved");
            Assert.IsTrue(!isWhiteSpacestatus, "Workflow with Whitespace status should not be saved");
        }


        [Description("Save New WorkFlow With Max Name Length")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157607)]
        [TestCategory("Func-NoDif2-Smoke")]
        public void SaveNewWorkFlowWithMaxNameLength()
        {
            try
            {
                GC.Collect();
                ////TestUtilities.RegistWinPrincipalFunc(AuthorizationService.AdminAuthorizationGroupName);
                TestUtilities.RegistCreateIntellisenseList();

                //WorkflowItem newWorkflow = WorkFlowActions.AutoGeneratedWorkFlowItem;
                //Set workflow Name to Empty
                newWorkflow.Name = TestUtilities.GetRandomStringOfLength(250);
                WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
            }

            catch (Exception ex)
            {
                bool isExpected = false;
                if (ex.Message.Contains(DataVerifier.NotFoundInActicityLibraryTable) ||
                      ex.Message.Contains(DataVerifier.NotFoundInStoreActicityTable))
                {
                    isExpected = true;
                }
                Assert.IsTrue(isExpected);
            }
        }


        [Description("Not Save NewWork Flow With Invalid Versioning")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157608)]
        [TestCategory("Func-Dif-Full")]
        [Ignore] /* UI has checked the invalid version. */
        public void NotSaveNewWorkFlowWithInvalidVersioning()
        {
            using (var principal = new Implementation<WindowsPrincipal>())
            {
                //principal.Register(p => p.IsInRole(AuthorizationService.AdminAuthorizationGroupName))
                // .Return(true);
                //principal.Register(p => p.IsInRole(AuthorizationService.AuthorAuthorizationGroupName))
                //    .Return(false);
                Thread.CurrentPrincipal = principal.Instance;
                WorkflowItem newWorkflow = WorkFlowActions.AutoGeneratedWorkFlowItem;
                //Create project or workflow as public activities
                var properties = new WorkFlowProperties
                {
                    Name = TestUtilities.GetRandomStringOfLength(15),
                    Status = "Public"
                };

                bool is6PartVerification = false;
                try
                {
                    properties.Version = "0.0.1.0.1.0";
                    WorkFlowActions.CreateSaveAndValidateWorkFlow(properties, newWorkflow);
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("is not a valid version number"))
                    {
                        is6PartVerification = true;
                    }
                }

                bool is3PartVerification = false;
                try
                {
                    properties.Version = "0.0.1";
                    WorkFlowActions.CreateSaveAndValidateWorkFlow(properties, newWorkflow);
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("is not a valid Marketplace version number"))
                    {
                        is3PartVerification = true;
                    }
                }

                //4 part verification
                Assert.IsTrue(is3PartVerification, "WorkFlow saved with InValid three parts Version = 0.0.1");

                //6 part verification
                Assert.IsTrue(is6PartVerification, "WorkFlow saved with InValid six parts Version = 0.0.1.0.1.0");
            }
        }


        [Description("Save New WorkFlow With Dependencies")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157609)]
        [TestCategory("Func-NoDif1-Full")]
        [Ignore]
        public void SaveNewWorkFlowWithDependencies()
        {
            //Create project or workflow as public activities
            var properties = new WorkFlowProperties
            {
                Name = TestUtilities.GetRandomStringOfLength(15),
                Status = "Private",
                Version = "0.1.0.1"
            };

            WorkflowItem parentWorkFlow = DynamicWorkFlow.CreateDependentWorkFlow(TestUtilities.GetRandomStringOfLength(30),
                                                   TestUtilities.GetRandomStringOfLength(10));

            //Create Save And Validate WorkFlow.
            WorkFlowActions.CreateSaveAndValidateWorkFlow(properties, parentWorkFlow, false);

            parentWorkFlow = DynamicWorkFlow.CreateDependentWorkFlow(TestUtilities.GetRandomStringOfLength(30),
                                                   TestUtilities.GetRandomStringOfLength(10));

            //Create Save And Validate WorkFlow.
            WorkFlowActions.CreateSaveAndValidateWorkFlow(properties, parentWorkFlow, false);
        }
    }
}
