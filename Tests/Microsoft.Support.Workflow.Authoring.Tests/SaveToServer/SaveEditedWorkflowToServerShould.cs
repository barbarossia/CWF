using System;
using System.Text;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Support.Workflow.Authoring.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.DynamicImplementations;
using System.Security.Principal;
using Microsoft.Support.Workflow.Authoring.Security;
using System.Threading;
using Microsoft.Support.Workflow.Authoring.Services;
using System.Windows;
using System.ServiceModel;

namespace Microsoft.Support.Workflow.Authoring.Tests.SaveToServer
{
    [TestClass]
    public class SaveEditedWorkflowToServerShould
    {
        private const string OWNER = "v-yiabdi";
        private const string TestCategory = "FullTest";
        private WorkflowItem newWorkflow = null;
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // Use TestInitialize to run code before running each test 
        [TestInitialize()]
        public void MyTestInitialize()
        {
            ////Create New WorkFlow
            //WorkflowItem lWflow = WorkFlowActions.AutoGeneratedWorkFlowItem;

            ////Create project or workflow as public activities
            //var properties = new WorkFlowProperties
            //{
            //    Name = TestUtilities.GetRandomStringOfLength(15),
            //    Status = "Private",
            //    Version = "0.1.0.1"
            //};
            //using (var principal = new Implementation<WindowsPrincipal>())
            //{
            //    principal.Register(p => p.IsInRole(AuthorizationService.AdminAuthorizationGroupName))
            //     .Return(true);
            //    principal.Register(p => p.IsInRole(AuthorizationService.AuthorAuthorizationGroupName))
            //        .Return(false);
            //    Thread.CurrentPrincipal = principal.Instance;

            //    newWorkflow = WorkFlowActions.CreateSaveAndValidateWorkFlow(properties, lWflow, false);
            //}
        }
        #endregion

        [Description("Not Save Edited WorkFlow With Empty Name")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157614)]
        [TestCategory("Func-NoDif1-Smoke")]
        public void NotSaveEditedWorkFlowWithEmptyName()
        {
            TestUtilities.RegistUtilityGetCurrentWindow();
            ////TestUtilities.RegistWinPrincipalFunc(AuthorizationService.AdminAuthorizationGroupName);
            TestUtilities.RegistCreateIntellisenseList();
            WorkflowItem workflow = WorkFlowActions.AutoGeneratedWorkFlowItem;
            //Set workflow Name to Empty
            workflow.Name = string.Empty;
            ExpectException.That(() =>
            {
                WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), workflow);
            }).Throws<CommunicationException>();
            workflow.Close();
        }

        [Description("Save New WorkFlow With Valid Property")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157616)]
        [TestCategory("Func-Dif-Full")]
        [Ignore]
        public void NotSaveEditedWorkFlowWithEmptyVersion()
        {
            try
            {
                using (var principal = new Implementation<WindowsPrincipal>())
                {
                    //principal.Register(p => p.IsInRole(AuthorizationService.AdminAuthorizationGroupName))
                    // .Return(true);
                    //principal.Register(p => p.IsInRole(AuthorizationService.AuthorAuthorizationGroupName))
                    //    .Return(false);
                    Thread.CurrentPrincipal = principal.Instance;
                    //Set WorkFlow Version to Empty
                    newWorkflow.Version = string.Empty;

                    //Workflow should not be entered in table
                    WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
                }
            }
            catch (Exception ex)
            {
                bool isExpected = false;
                if (ex.Message.Contains("is not a valid Marketplace version number"))
                {
                    isExpected = true;
                }
                Assert.IsTrue(isExpected);
            }
        }

        [Description("Save New WorkFlow With Valid Property")]
        [TestMethod]
        [Owner(OWNER)]
        [WorkItem(157618)]
        [TestCategory("Func-NoDif1-Full")]
        [Ignore] /* UI has checked the invalid version. */
        public void NotSaveEditedWorkFlowWithInvalidVersioning()
        {
            using (var principal = new Implementation<WindowsPrincipal>())
            {
                //principal.Register(p => p.IsInRole(AuthorizationService.AdminAuthorizationGroupName))
                // .Return(true);
                //principal.Register(p => p.IsInRole(AuthorizationService.AuthorAuthorizationGroupName))
                //    .Return(false);
                Thread.CurrentPrincipal = principal.Instance;
                bool is6PartVerification = false;
                try
                {
                    newWorkflow.Version = "0.0.1.0.1.0";
                    WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("is not a valid version number"))
                    {
                        is6PartVerification = true;
                    }
                }

                bool is3PartVerification = false;
                try
                {
                    newWorkflow.Version = "0.0.1";
                    WorkFlowActions.CreateSaveAndValidateWorkFlow(new WorkFlowProperties(), newWorkflow);
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("is not a valid Marketplace version number"))
                    {
                        is3PartVerification = true;
                    }
                }

                //4 part verification
                Assert.IsTrue(is3PartVerification, "WorkFlow saved with InValid three parts Version = 0.0.1");

                //6 part verification
                Assert.IsTrue(is6PartVerification, "WorkFlow saved with InValid six parts Version = 0.0.1.0.1.0");
            }
        }
    }
}
